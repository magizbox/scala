{
    "docs": [
        {
            "location": "/", 
            "text": "What is Scala?\n\n\n\n\n\n\nScala is a programming language for general software applications. Scala has full support for functional programming and a very strong static type system. This allows programs written in Scala to be very concise and thus smaller in size than other general-purpose programming languages. Many of Scala's design decisions were inspired by criticism of the shortcomings of Java.\n\n\n\n\nBooks\n\n\n\n\n\n\n\n\nCourses\n\n\n\n\n\n\n\n\nVideos\n\n\n\n\n\n\n\n\nExternal Links\n\n\n\n\nScala Documentation\n\n\ntutorialspoint, Scala Tutorial", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-scala", 
            "text": "Scala is a programming language for general software applications. Scala has full support for functional programming and a very strong static type system. This allows programs written in Scala to be very concise and thus smaller in size than other general-purpose programming languages. Many of Scala's design decisions were inspired by criticism of the shortcomings of Java.", 
            "title": "What is Scala?"
        }, 
        {
            "location": "/#books", 
            "text": "", 
            "title": "Books"
        }, 
        {
            "location": "/#courses", 
            "text": "", 
            "title": "Courses"
        }, 
        {
            "location": "/#videos", 
            "text": "", 
            "title": "Videos"
        }, 
        {
            "location": "/#external-links", 
            "text": "Scala Documentation  tutorialspoint, Scala Tutorial", 
            "title": "External Links"
        }, 
        {
            "location": "/install/", 
            "text": "Windows\n\n\nStep 1. Download scala from \nhttp://www.scala-lang.org/downloads\n\n\nStep 2. Run installer\n\n\nStep 3. Verify\n\n\nOpen terminal and check which version of scala\n\n\n$ scala -version\n\nScala code runner version 2.11.5 -- Copyright 2002-2013, LAMP/EPFL", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#windows", 
            "text": "Step 1. Download scala from  http://www.scala-lang.org/downloads  Step 2. Run installer  Step 3. Verify  Open terminal and check which version of scala  $ scala -version\n\nScala code runner version 2.11.5 -- Copyright 2002-2013, LAMP/EPFL", 
            "title": "Windows"
        }, 
        {
            "location": "/ide/", 
            "text": "IDE\n\n\nI use IntelliJ IDEA 2016.2 as scala IDE\n\n\n\n\nIntelliJ IDEA Installation Guide\n\n\n\n\nOnline IDE\n\n\nYou can use \ntryscala\n as an online IDE\n\n\nhttp://www.tryscala.com/", 
            "title": "IDE"
        }, 
        {
            "location": "/ide/#ide", 
            "text": "I use IntelliJ IDEA 2016.2 as scala IDE   IntelliJ IDEA Installation Guide", 
            "title": "IDE"
        }, 
        {
            "location": "/ide/#online-ide", 
            "text": "You can use  tryscala  as an online IDE  http://www.tryscala.com/", 
            "title": "Online IDE"
        }, 
        {
            "location": "/basic_syntax/", 
            "text": "Basic Syntax\n\n\nPrint print\n\n\n println(\nHello, Scala!\n);\n\nHello, Scala!\n\n\n\n\nConditional\n\n\nif\n Statement\n\n\nif\n statement consists of a Boolean expression followed by one or more statements.\n\n\nvar x = 10;\nif( x \n 20 ){\n println(\nThis is if statement\n);\n}\n\n\n\n\nif-else\n Statement\n\n\nvar x = 30\nif( x \n 20 ){\n  println(\nThis is if statement\n);\n} else {\n  println(\nThis is else statement\n);\n}\n\n\n\n\nif-else if-else\n Statement\n\n\n var x = 30;\nif( x == 10 ){\n println(\nValue of X is 10\n);\n} else if( x == 20 ){\n println(\nValue of X is 20\n);\n} else if( x == 30 ){\n println(\nValue of X is 30\n);\n} else{\n println(\nThis is else statement\n);\n}\n\n\n\n\nCoding Convention \n1\n\n\nKeep It Simple\n\n\nDon't pack two much in one expression\n\n\n/*\n * It's amazing what you can get done in a single statement\n * But that does not mean you have to do it.\n */\njp.getRawClasspath.filter(\n  _.getEntryKind == IClasspathEntry.CPE_SOURCE).\n  iterator.flatMap(entry =\n\n    flatten(ResourcesPlugin.getWorkspace.\n      getRoot.findMember(entry.getPath)))\n\n\n\n\nRefactor\n\n\n\n\nThere's a lot of value in meaningfull names.\n\n\nEasy to add them using inline vals and defs\n\n\n\n\nval sources = jp.getRawClasspath.filter(\n  _.getEntryKind == IClasspathEntry.CPE_SOURCE)\ndef workspaceRoot =\n  ResourcesPlugin.getWorkspace.getRoot\ndef filesOfEntry(entry: Set[File]) =\n  flatten(worspaceRoot.findMember(entry.getPath)\nsources.iterator flatMap filesOfEntry\n\n\n\n\nPrefer Functional\n\n\nBy default\n\n\n\n\nuse vals, not vars\n\n\nuse recursions or combinators, not loops\n\n\nuse immutable collections\n\n\nconcentrate on transformations, not CRUD\n\n\n\n\nWhen to deviate from the default\n- sometimes, mutable gives better performance.\n- sometimes (but not that often!) it adds convenience\n\n\nBut don't diablolize local state\n\n\nWhy does mutable state lead to complexity?\n\n\nIt interacts with different program parts in ways that are hard to track.\n\n\n=\n Local state is less harmful than global state.\n\n\n\"Var\" Shortcuts\n\n\nvar interfaces = parseClassHeader()...\nif (isAnnotation) interfaces += ClassFileAnnotation\n\n\n\n\nRefactor\n\n\nval parsedIfaces = parseClassHeader()\nval interfaces =\n  if (isAnnotation) parsedIfaces + ClassFileAnnotation\n  else parsedIfaces\n\n\n\n\n\n\n\n\n\n\n\n\nMartin Odersky - Scala with Style", 
            "title": "Basic Syntax"
        }, 
        {
            "location": "/basic_syntax/#basic-syntax", 
            "text": "", 
            "title": "Basic Syntax"
        }, 
        {
            "location": "/basic_syntax/#print-print", 
            "text": "println( Hello, Scala! );\n\nHello, Scala!", 
            "title": "Print print"
        }, 
        {
            "location": "/basic_syntax/#conditional", 
            "text": "if  Statement  if  statement consists of a Boolean expression followed by one or more statements.  var x = 10;\nif( x   20 ){\n println( This is if statement );\n}  if-else  Statement  var x = 30\nif( x   20 ){\n  println( This is if statement );\n} else {\n  println( This is else statement );\n}  if-else if-else  Statement   var x = 30;\nif( x == 10 ){\n println( Value of X is 10 );\n} else if( x == 20 ){\n println( Value of X is 20 );\n} else if( x == 30 ){\n println( Value of X is 30 );\n} else{\n println( This is else statement );\n}", 
            "title": "Conditional"
        }, 
        {
            "location": "/basic_syntax/#coding-convention-1", 
            "text": "", 
            "title": "Coding Convention 1"
        }, 
        {
            "location": "/basic_syntax/#keep-it-simple", 
            "text": "", 
            "title": "Keep It Simple"
        }, 
        {
            "location": "/basic_syntax/#dont-pack-two-much-in-one-expression", 
            "text": "/*\n * It's amazing what you can get done in a single statement\n * But that does not mean you have to do it.\n */\njp.getRawClasspath.filter(\n  _.getEntryKind == IClasspathEntry.CPE_SOURCE).\n  iterator.flatMap(entry = \n    flatten(ResourcesPlugin.getWorkspace.\n      getRoot.findMember(entry.getPath)))", 
            "title": "Don't pack two much in one expression"
        }, 
        {
            "location": "/basic_syntax/#refactor", 
            "text": "There's a lot of value in meaningfull names.  Easy to add them using inline vals and defs   val sources = jp.getRawClasspath.filter(\n  _.getEntryKind == IClasspathEntry.CPE_SOURCE)\ndef workspaceRoot =\n  ResourcesPlugin.getWorkspace.getRoot\ndef filesOfEntry(entry: Set[File]) =\n  flatten(worspaceRoot.findMember(entry.getPath)\nsources.iterator flatMap filesOfEntry", 
            "title": "Refactor"
        }, 
        {
            "location": "/basic_syntax/#prefer-functional", 
            "text": "By default   use vals, not vars  use recursions or combinators, not loops  use immutable collections  concentrate on transformations, not CRUD   When to deviate from the default\n- sometimes, mutable gives better performance.\n- sometimes (but not that often!) it adds convenience", 
            "title": "Prefer Functional"
        }, 
        {
            "location": "/basic_syntax/#but-dont-diablolize-local-state", 
            "text": "Why does mutable state lead to complexity?  It interacts with different program parts in ways that are hard to track.  =  Local state is less harmful than global state.", 
            "title": "But don't diablolize local state"
        }, 
        {
            "location": "/basic_syntax/#var-shortcuts", 
            "text": "var interfaces = parseClassHeader()...\nif (isAnnotation) interfaces += ClassFileAnnotation  Refactor  val parsedIfaces = parseClassHeader()\nval interfaces =\n  if (isAnnotation) parsedIfaces + ClassFileAnnotation\n  else parsedIfaces      Martin Odersky - Scala with Style", 
            "title": "\"Var\" Shortcuts"
        }
    ]
}